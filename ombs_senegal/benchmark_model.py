# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_benchmark_model.ipynb.

# %% auto 0
__all__ = ['normalize', 'FeatureGenerator', 'SimpleRegressionModel']

# %% ../nbs/01_benchmark_model.ipynb 3
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# %% ../nbs/01_benchmark_model.ipynb 6
def normalize(df):
    return (df - df.min()) / (df.max() - df.min())

# %% ../nbs/01_benchmark_model.ipynb 11
class FeatureGenerator:
    """
    Transforms time series data into feature matrices suitable for machine learning models.
    Creates lagged features using a sliding window and optionally generates polynomial features
    to capture non-linear relationships between variables.
    """
    def __init__(self, context_window: int = 10, degree: int = 1):
        self.context_window = context_window
        self.poly_features = PolynomialFeatures(degree=degree)
        
    def generate(self, df: pd.DataFrame, x_col: list[str], y_col: list[str]) -> tuple[pd.DataFrame, pd.DataFrame]:
        X, y = df[x_col], df[y_col]
        if 1 < self.poly_features.degree:
            X = pd.DataFrame(self.poly_features.fit_transform(X), index=X.index)
        X, y = self.generate_sliding_window_features(X, y)
        return X, y


    def generate_sliding_window_features(self, X: pd.DataFrame, y: pd.DataFrame) -> tuple[pd.DataFrame, pd.DataFrame]:
        """
        Creates a feature matrix by combining multiple input variables and their lagged values.
        For each time step t, takes values from t-window to t for each input variable
        and combines them into a single feature vector. The target value is taken at time t.
        This allows the model to learn patterns across multiple timesteps.
        """
        features = []
        targets = []
        
        for i in range(len(X) - self.context_window):
            row_features = X.iloc[i:i + self.context_window]
            features.append(row_features.values.reshape(-1))
            targets.append(y.iloc[i + self.context_window])
        return pd.DataFrame(index=X.index[self.context_window:], data=features), pd.DataFrame(index=y.index[self.context_window:], data=targets)

# %% ../nbs/01_benchmark_model.ipynb 14
class SimpleRegressionModel:
    def __init__(self):
        self.model = LinearRegression()
    
    def fit(self, X, y=None):
        self.model.fit(X, y)
        return self
    
    def predict(self, X):
        prediction = self.model.predict(X)
        return pd.Series(prediction.reshape(-1), index=X.index)
